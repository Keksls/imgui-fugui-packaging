name: CI

on:
  create:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:
    inputs:
      ReleaseType:
        description: 'Release or Debug'
        required: true
        default: 'Release'

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
            architecture: x64
          - os: windows-latest
            architecture: x86
          - os: windows-latest
            architecture: ARM64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Init submodules and checkout fuguiBuild
        run: |
          git submodule update --init cimgui
          cd cimgui
          git checkout fuguiBuild
          git submodule update --init imgui
          cd imgui
          git checkout fuguiBuild
        shell: bash

      - name: Setup .NET
        if: matrix.os == 'windows-latest'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build source package
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        run: dotnet pack -c Release ImGui.NET.SourceBuild.csproj
        shell: bash

      - name: Upload source package
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        with:
          name: win-x64-source
          path: bin/Packages/Release/*.nupkg

      - name: Publish untagged source package to MyGet
        if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/master' && matrix.architecture == 'x64'
        run: dotnet nuget push bin/Packages/Release/*.nupkg -s https://www.myget.org/F/mellinoe/api/v3/index.json --api-key ${{secrets.MYGET_KEY}}
        continue-on-error: true

      - name: Publish tagged source package release to nuget.org
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') && matrix.architecture == 'x64'
        run: dotnet nuget push bin/Packages/Release/*.nupkg -s https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_KEY}}
        continue-on-error: true

      - name: Build ${{ github.event.inputs.ReleaseType || 'Release' }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./ci-build.cmd ${{ github.event.inputs.ReleaseType || 'Release' }} ${{ matrix.architecture }}
          else
            ./ci-build.sh ${{ github.event.inputs.ReleaseType || 'Release' }}
          fi
        shell: bash

      - name: Upload win-${{ matrix.architecture }} ${{ github.event.inputs.ReleaseType || 'Release' }}
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: win-${{ matrix.architecture }}
          path: cimgui/build/${{ matrix.architecture }}/${{ github.event.inputs.ReleaseType || 'Release' }}/*

      - name: Upload ${{ matrix.os }} ${{ github.event.inputs.ReleaseType || 'Release' }}
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        with:
          name: ${{ matrix.os }}-x64
          path: cimgui/build/${{ github.event.inputs.ReleaseType || 'Release' }}/*

      - name: Upload Json Files
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        with:
          name: JsonFiles
          path: cimgui/generator/output/*.json

  CreateReleaseOnTagCreate:
    runs-on: ubuntu-latest
    needs: [Build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5

      - name: Rename win-x64 and win-x86 artifacts
        run: |
          mv win-x64/cimgui.dll win-x64/cimgui.win-x64.dll
          mv win-x86/cimgui.dll win-x86/cimgui.win-x86.dll
          mv win-ARM64/cimgui.dll win-ARM64/cimgui.win-arm64.dll

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            win-x64/cimgui.win-x64.dll
            win-x86/cimgui.win-x86.dll
            win-ARM64/cimgui.win-arm64.dll
            JsonFiles/*
            ubuntu-latest-x64/cimgui.so
            macos-latest-x64/cimgui.dylib

  BundleAll:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all-artifacts

      - name: Zip all builds
        run: |
          zip -r all-builds.zip all-artifacts

      - name: Upload zip of all builds
        uses: actions/upload-artifact@v4
        with:
          name: all-builds-zip
          path: all-builds.zip
